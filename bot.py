import logging
from typing import Dict
import time

from telegram import ReplyKeyboardMarkup, Update, KeyboardButton, ParseMode, ChatAction
from telegram.ext import (
    Updater,
    CommandHandler,
    MessageHandler,
    Filters,
    ConversationHandler,
    CallbackContext
)

from upload import download_music_to_server, upload_music_to_user

from functions import (
    first_menu_markup,
    search_type_buttons_markup,
    quality_menu_markup,
    music_format_menu_markup,
    final_downloading_menu_markup,
    final_menu_markup,
    uploading_type_menu_markup
)

from config import search_type_user, search_type

# Enable logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)

logger = logging.getLogger(__name__)

CHOOSING_FIRST_MENU, TYPING_SPOTIFY_LINK, TYPING_QUERY_STRING, TYPING_MUSIC_QUALITY, TYPING_MUSIC_FORMAT, FILES_DOWNLOADED_TO_SERVER, FINAL_STEP = range(7)

############################################
# main functions
############################################

def facts_to_str(user_data: Dict[str, str]) -> str:
    facts = list()

    for key, value in user_data.items():
        facts.append(f'{key} - {value}')

    return "\n".join(facts).join(['\n', '\n'])

def start(update: Update, context: CallbackContext) -> int:
    update.message.reply_text(
        '''
–ú–µ–Ω—è –∑–æ–≤—É—Ç <b>Fricky</b>. –Ø –ø–æ–º–æ—â–Ω–∏–∫ –≤ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ç—Ä–µ–∫–æ–≤ –∏–∑ Spotify –∏–ª–∏/–∏ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç–∞:
1. –°–∫–∞—á–∞—Ç—å –ª—é–±–æ–π —Ç—Ä–µ–∫/–∞–ª—å–±–æ–º/–ø–ª–µ–π–ª–∏—Å—Ç –∏–∑ Spotify
2. –Ø –º–æ–≥—É –Ω–∞–π—Ç–∏ –∏ —Å–∫–∞—á–∞—Ç—å –ª—é–±–æ–π —Ç—Ä–µ–∫/–∞–ª—å–±–æ–º –≤ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç–µ

–í—ã–±–µ—Ä–µ—Ç–µ —Ä–∞–∑–¥–µ–ª –≤ –º–µ–Ω—é –Ω–∏–∂–µ
        ''',
        reply_markup=first_menu_markup,
        parse_mode=ParseMode.HTML
    )

    return CHOOSING_FIRST_MENU


def get_flow(update: Update, context: CallbackContext) -> int:
    text = update.message.text
    context.user_data['first_choice'] = text
    if text == 'üì≤ –°–∫–∞—á–∞—Ç—å –¢—Ä–µ–∫/–ê–ª—å–±–æ–º/–ü–ª–µ–π–ª–∏—Å—Ç –∏–∑ Spotify':
        update.message.reply_text('–û—Ç–ø—Ä–∞–≤—å—Ç–µ Spotify —Å—Å—ã–ª–∫—É –Ω–∞ –ø–ª–µ–π–ª–∏—Å—Ç, —Ç—Ä–µ–∫ –∏–ª–∏ –∞–ª—å–±–æ–º',parse_mode=ParseMode.HTML)
    else:
        update.message.reply_text('–£–∫–∞–∂–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –º–µ–Ω—é –Ω–∏–∂–µ', reply_markup=search_type_buttons_markup , parse_mode=ParseMode.HTML)

    return TYPING_SPOTIFY_LINK

def get_spotify_link(update: Update, context: CallbackContext) -> int:
    text = update.message.text
    context.user_data['spotify_link'] = text

    update.message.reply_text('–í—ã–±–µ—Ä–µ—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å–∫–∞—á–∏–≤–∞–µ–º—ã—Ö —Ç—Ä–µ–∫–æ–≤ –Ω–∏–∂–µ', reply_markup=quality_menu_markup, parse_mode=ParseMode.HTML)

    return TYPING_MUSIC_QUALITY

def get_category_to_search(update: Update, context: CallbackContext) -> int:
    text = update.message.text
    context.user_data['category_to_search'] = text

    update.message.reply_text('''
–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ {0}–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
<b>{1}</b>
    '''.format(text, search_type_user[text]), parse_mode=ParseMode.HTML)

    return TYPING_QUERY_STRING

def get_search_query(update: Update, context: CallbackContext) -> int:
    text = update.message.text
    context.user_data['search_query_string'] = text

    update.message.reply_text('–í—ã–±–µ—Ä–µ—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å–∫–∞—á–∏–≤–∞–µ–º—ã—Ö —Ç—Ä–µ–∫–æ–≤ –Ω–∏–∂–µ', reply_markup=quality_menu_markup, parse_mode=ParseMode.HTML)

    return TYPING_MUSIC_QUALITY

def get_music_quality(update: Update, context: CallbackContext) -> int:
    text = update.message.text
    context.user_data['music_quality'] = text
    update.message.reply_text(
        '''
        –í—ã–±–µ—Ä–µ—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Å–∫–∞—á–∏–≤–∞–µ–º—ã—Ö —Ç—Ä–µ–∫–æ–≤
        ''',
        reply_markup=music_format_menu_markup,
        parse_mode=ParseMode.HTML
    )

    return TYPING_MUSIC_FORMAT

def get_music_format(update: Update, context: CallbackContext) -> int:
    text = update.message.text
    context.user_data['music_format'] = text
    bot = update.message.bot
    chat_id = update.message.chat.id
    update_message = update.message
    user_content = context.user_data

    update.message.reply_text(
        "–û—Ç–ª–∏—á–Ω–æ! –ù–∏–∂–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –∫–æ—Ç–æ—Ä—É—é –í—ã –º–Ω–µ —Ä–∞—Å—Å–∫–∞–∑–∞–ª–∏:"
        f"{facts_to_str(context.user_data)} ",
    )

    # –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ç—Ä–µ–∫–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    update.message.reply_text('–°–∫–∞—á–∏–≤–∞–µ–º —Ç—Ä–µ–∫–∏...')
    bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
    download_music_to_server(user_content, update_message, chat_id)

    # —Ä–µ–ø–ª–∏–∫–∞ –∏ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –≤ –¢–µ–ª–µ–≥—Ä–∞–º
    update.message.reply_text('''
–í—ã–±–µ—Ä–∏—Ç–µ –≤ –∫–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –≤–∞–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∫–∞—á–µ–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏:

- <b>üóÇ –ê—Ä—Ö–∏–≤ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ)</b> - –¥–ª—è –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç—Ä–µ–∫–æ–≤. –ú—ã –∑–∞–ø–∞–∫—É–µ–º –≤–∞—à–∏ —Ç—Ä–µ–∫–∏ –≤ –∞—Ä—Ö–∏–≤ –∏ –∑–∞–≥—Ä—É–∑–∏–º –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫ (–∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è 50–º–± –≤ –¢–µ–ª–µ–≥—Ä–∞–º–µ);

- <b>üéµ –¢—Ä–µ–∫–∏ –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏</b> - –¥–ª—è 1-5 —Ç—Ä–µ–∫–æ–≤. –ú—ã –∑–∞–≥—Ä—É–∑–∏–º –≤–∞—à–∏ —Ç—Ä–µ–∫–∏ –Ω–∞–ø—Ä—è–º—É—é –≤ –¢–µ–ª–µ–≥—Ä–∞–º.
    ''', reply_markup=uploading_type_menu_markup, parse_mode=ParseMode.HTML)


    return FILES_DOWNLOADED_TO_SERVER


def uploading_downloaded_files(update: Update, context: CallbackContext) -> int:
    uploading_type = update.message.text
    music_format = context.user_data['music_format']
    context.user_data['uploading_type'] = str(uploading_type)
    bot = update.message.bot
    chat_id = update.message.chat.id
    update_message = update.message

    # –Ω–∞—á–∏–Ω–∞–µ–º uploading —Ç—Ä–µ–∫–æ–≤ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º
    update.message.reply_text('–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–æ–≤ –≤ –¢–µ–ª–µ–≥—Ä–∞–º–º...')

    bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
    upload_music_to_user(bot, chat_id, uploading_type, music_format, update_message)

    return FINAL_STEP

def done(update: Update, context: CallbackContext) -> int:

    return ConversationHandler.END


############################################
# main handler
############################################

def main() -> None:
    # Create the Updater and pass it your bot's token.
    # Make sure to set use_context=True to use the new context based callbacks
    # Post version 12 this will no longer be necessary
    updater = Updater("your_telegram_bot_token_here", use_context=True)

    # Get the dispatcher to register handlers
    dispatcher = updater.dispatcher

    # Add conversation handler with the states CHOOSING, TYPING_CHOICE and TYPING_REPLY
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            # —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
            CHOOSING_FIRST_MENU: [
                # handler to run all about breeds
                MessageHandler(Filters.regex('^(üì≤ –°–∫–∞—á–∞—Ç—å –¢—Ä–µ–∫/–ê–ª—å–±–æ–º/–ü–ª–µ–π–ª–∏—Å—Ç –∏–∑ Spotify)$'), get_flow),
                MessageHandler(Filters.regex('^(üîé –ù–∞–π—Ç–∏ –∏ —Å–∫–∞—á–∞—Ç—å –¢—Ä–µ–∫/–ê–ª—å–±–æ–º/–ü–ª–µ–π–ª–∏—Å—Ç –∏–∑ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç–∞)$'), get_flow)
            ],

            TYPING_SPOTIFY_LINK: [
                # handler to run all about breeds
                MessageHandler(~(Filters.regex('^(üìÄ –ê–ª—å–±–æ–º|üéµ –¢—Ä–µ–∫|üéß –ü–ª–µ–π–ª–∏—Å—Ç)$')), get_spotify_link),
                MessageHandler(Filters.regex('^(üìÄ –ê–ª—å–±–æ–º|üéµ –¢—Ä–µ–∫|üéß –ü–ª–µ–π–ª–∏—Å—Ç)$'), get_category_to_search)
                 #MessageHandler(Filters.text & ~(Filters.command | Filters.regex('^Done$')), get_spotify_link),
            ],

            TYPING_QUERY_STRING: [
                # handler to run all about breeds
                MessageHandler(Filters.text & ~(Filters.command | Filters.regex('^Done$')), get_search_query),
            ],

            TYPING_MUSIC_QUALITY: [
                # handler to run all about breeds
                MessageHandler(Filters.regex('^(–õ—É—á—à–µ–µ|Q32K|Q96K|Q128K|Q192K|Q256K|Q320K|–•—É–¥—à–µ–µ)$'), get_music_quality)
            ],

            TYPING_MUSIC_FORMAT: [
                # handler to run all about breeds
                MessageHandler(Filters.regex('^(MP3|AAC|FLAC|M4A|OPUS|VORBIS|WAV)$'), get_music_format),

            ],

            FILES_DOWNLOADED_TO_SERVER: [
                # handler to run all about breeds
                MessageHandler(Filters.regex('^(üóÇ –ê—Ä—Ö–∏–≤|üéµ –¢—Ä–µ–∫–∏ –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏)$'), uploading_downloaded_files),
                #MessageHandler(Filters.text & ~(Filters.command | Filters.regex('^Done$')), uploading_downloaded_files),

            ],

            FINAL_STEP: [
                # handler to run all about breeds
                MessageHandler(Filters.regex('^(üè†–ù–∞ –≥–ª–∞–≤–Ω—É—é)$'), done),

            ],

        },
        fallbacks=[MessageHandler(Filters.regex('^Done$'), done)],
    )

    dispatcher.add_handler(conv_handler)

    # Start the Bot
    updater.start_polling()

    # Run the bot until you press Ctrl-C or the process receives SIGINT,
    # SIGTERM or SIGABRT. This should be used most of the time, since
    # start_polling() is non-blocking and will stop the bot gracefully.
    updater.idle()

if __name__ == '__main__':
    main()
